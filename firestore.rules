rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /elections/{electionId} {
      // Allow anyone to read elections
      allow read: if true;
      
      // Allow creating new elections
      allow create: if 
        // Validate election document structure
        request.resource.data.title is string &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.candidates is list &&
        request.resource.data.candidates.size() > 0 &&
        request.resource.data.votes is list &&
        request.resource.data.createdAt is string;
      
      // Allow updating to add votes
      allow update: if
        // Make sure the original document exists
        resource != null &&
        // Only allow changes to the votes array
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votes']) &&
        // Make sure all other fields remain unchanged
        request.resource.data.title == resource.data.title &&
        request.resource.data.candidates == resource.data.candidates &&
        request.resource.data.createdAt == resource.data.createdAt &&
        // Validate the new vote being added
        validateNewVote(resource.data, request.resource.data);
    }
    
    function validateNewVote(old, new) {
      let oldVotes = old.votes;
      let newVotes = new.votes;
      
      // Check if exactly one vote was added
      let hasOneNewVote = newVotes.size() == oldVotes.size() + 1;
      
      // Get the new vote
      let newVote = newVotes[newVotes.size() - 1];
      
      return hasOneNewVote &&
        // Validate vote structure
        newVote.voterName is string &&
        newVote.voterName.size() > 0 &&
        newVote.ranking is list &&
        newVote.approved is list &&
        newVote.timestamp is string;
    }
  }
}
